package generation

import (
	"slices"

	"github.com/PlayerR9/SLParser/cmd/pkg"
	uslc "github.com/PlayerR9/SLParser/util/slices"
	ggen "github.com/PlayerR9/go-generator/generator"
)

type ASTGen struct {
	PackageName string
	Table       map[string][]*pkg.Rule
	Entries     []string
	NodeTypes   []string
}

func (g *ASTGen) SetPackageName(pkg_name string) {
	g.PackageName = pkg_name
}

var (
	ASTGenerator *ggen.CodeGenerator[*ASTGen]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*ASTGen]("", ast_templ)
	if err != nil {
		Logger.Fatalf("Error creating code generator: %s", err.Error())
	}

	f1 := func(a *ASTGen) error {
		a.NodeTypes = []string{"SourceNode"}

		entries := make([]string, 0, len(a.Table))

		for lhs, rules := range a.Table {
			aeg := NewAstElemGen(lhs, rules)
			if aeg == nil {
				continue
			}

			entries = append(entries, aeg.String())

			pos, ok := slices.BinarySearch(a.NodeTypes, aeg.Target)
			if !ok {
				a.NodeTypes = slices.Insert(a.NodeTypes, pos, aeg.Target)
			}
		}

		a.Entries = entries

		a.NodeTypes = uslc.DeleteElem(a.NodeTypes, "SourceNode")

		return nil
	}

	tmp.AddDoFunc(f1)

	ASTGenerator = tmp
}

const ast_templ string = `// Code generated by SlParser.
package {{ .PackageName }}

import (
	"github.com/PlayerR9/grammar/ast"
	gr "github.com/PlayerR9/grammar/grammar"
)

// NodeType represents the type of a node in the AST tree.
type NodeType int

{{ if eq (len .NodeTypes) 0 }}const (
	SourceNode NodeType = iota

	// Add here your custom node types.
){{ else }}const (
	SourceNode NodeType = iota

	{{ range $index, $node := .NodeTypes }}
	{{ $node }}
	{{ end }}

	// Add here your custom node types.
){{ end }}

// String implements the NodeTyper interface.
func (t NodeType) String() string {
	return [...]string{
		"Source",
		// Add here your custom node names.
	}[t]
}

var (
	// ast_builder is the AST builder of the parser.
	ast_builder *ast.Make[*Node, token_type]
)

func init() {
	ast_builder = ast.NewMake[*Node, token_type]()

	parts := ast.NewPartsBuilder[*Node]()

	// Add here your custom AST builder rules...
	{{- range $index, $entry := .Entries }}
		{{ $entry }}
	{{ end }}
}`
