package generation

import (
	ggen "github.com/PlayerR9/go-generator/generator"
)

type GrammarGen struct {
	PackageName string
}

func (g *GrammarGen) SetPackageName(pkg_name string) {
	g.PackageName = pkg_name
}

var (
	GrammarGenerator *ggen.CodeGenerator[*GrammarGen]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*GrammarGen]("", grammar_templ)
	if err != nil {
		Logger.Fatalf("Error creating code generator: %s", err.Error())
	}

	GrammarGenerator = tmp
}

const grammar_templ string = `// Code generated by SlParser. Do not edit.
package {{ .PackageName }}

import (
	"github.com/PlayerR9/grammar"
)

var (
	// Parser is the complete parser of the grammar.
	Parser *grammar.Parser[*Node, token_type]
)

func init() {
	Parser = grammar.NewParser(
		internal_lexer,
		internal_parser,
		ast_builder,
	)
}`
