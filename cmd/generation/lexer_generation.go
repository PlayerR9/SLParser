package generation

import (
	ggen "github.com/PlayerR9/go-generator/generator"
)

type LexerGen struct {
	PackageName string
}

func (g *LexerGen) SetPackageName(pkg_name string) {
	g.PackageName = pkg_name
}

var (
	LexerGenerator *ggen.CodeGenerator[*LexerGen]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*LexerGen]("", lexer_templ)
	if err != nil {
		Logger.Fatalf("Error creating code generator: %s", err.Error())
	}

	LexerGenerator = tmp
}

const lexer_templ string = `// Code generated by SlParser.
package {{ .PackageName }}

import (
	"github.com/PlayerR9/grammar/grammar"
	"github.com/PlayerR9/grammar/lexing"
)

var (
	// internal_lexer is the lexer of the grammar.
	internal_lexer lexing.Lexer[token_type]
)

func init() {
	lex_one := func(l *lexing.Lexer[token_type]) (*grammar.Token[token_type], error) {
		// Lex here anything that matcher doesn't handle...
	
		panic("Implement me!")
	}

	internal_lexer.WithLexFunc(lex_one)

	// Add here your custom matcher rules.
}`
