package generation

import (
	"log"

	"github.com/PlayerR9/SLParser/cmd/pkg"
	prx "github.com/PlayerR9/SLParser/parser"
	ast "github.com/PlayerR9/grammar/ast"
	ggen "github.com/PlayerR9/lib_units/generator"
)

var (
	// Logger is the logger used to log messages.
	Logger *log.Logger
)

func init() {
	Logger = ggen.InitLogger("SL parser")
}

type Gen struct {
	Root *ast.Node[prx.NodeType]

	PackageName  string
	SpecialEnums []string
	LexerEnums   []string
	ParserEnums  []string
	Rules        string
}

func (g *Gen) SetPackageName(pkg_name string) {
	g.PackageName = pkg_name
}

var (
	Generator *ggen.CodeGenerator[*Gen]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*Gen]("", templ)
	if err != nil {
		Logger.Fatalf("Error creating code generator: %s", err.Error())
	}

	tmp.AddDoFunc(func(g *Gen) error {
		rules, err := pkg.ExtractRules(g.Root)
		if err != nil {
			return err
		}

		g.Rules = pkg.StringifyRules(rules)

		return nil
	})

	Generator = tmp
}

const templ string = `// Code generated by EbnfParser. DO NOT EDIT.
package {{ .PackageName }}

// TokenType is the type of a token.
type TokenType int

const (
   {{- range $index, $element := .SpecialEnums }}
	{{ if eq $index 0 }} {{- $element }} TokenType = iota {{ else }} {{- $element }} {{ end }}
	{{- end }}
	{{ range $index, $element := .LexerEnums }}
	{{ $element }}
	{{- end }}
	{{ range $index, $element := .ParserEnums }}
	{{ $element }}
	{{- end }}
)

func (t TokenType) String() string {
	return [...]string{
		"End of File",
		// Add here your custom token names.
	}[t]
}

func (t TokenType) GoString() string {
	return [...]string{
		{{- range $index, $element := .SpecialEnums }}
		"{{ $element }}",
		{{- end }}
		{{ range $index, $element := .LexerEnums }}
		"{{ $element }}",
		{{- end }}
		{{ range $index, $element := .ParserEnums }}
		"{{ $element }}",
		{{- end }}
	}[t]
}
	
const Grammar string = ` + "`" + `{{ .Rules }}` + "`" + `
`
