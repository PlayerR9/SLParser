package generation

import (
	"slices"

	"github.com/PlayerR9/SLParser/cmd/pkg"
	uslc "github.com/PlayerR9/go-commons/cmp"
	ggen "github.com/PlayerR9/go-generator/generator"
)

/*
func X(root *) {
	0:Node[Source]
    └── 0:Node[Rule ("Source")]
    │   ├── 9:Node[Identifier ("Source1")]
    │   └── 17:Node[Identifier ("EOF")]
    └── 23:Node[Rule ("Source1")]
    │   └── 33:Node[Identifier ("Rule")]
    └── 40:Node[Rule ("Source1")]
    │   ├── 50:Node[Identifier ("Rule")]
    │   ├── 55:Node[Identifier ("newline")]
    │   └── 63:Node[Identifier ("Source1")]
    └── 73:Node[Rule ("Rule")]
    │   ├── 80:Node[Identifier ("uppercase_id")]
    │   ├── 93:Node[Identifier ("equal")]
    │   ├── 99:Node[Identifier ("RhsCls")]
    │   └── 106:Node[Identifier ("dot")]
    └── 112:Node[Rule ("Rule")]
    │   ├── 119:Node[Identifier ("uppercase_id")]
    │   ├── 132:Node[Identifier ("newline")]
    │   ├── 140:Node[Identifier ("equal")]
    │   ├── 146:Node[Identifier ("RhsCls")]
    │   └── 153:Node[Identifier ("RuleLine")]
    └── 164:Node[Rule ("RuleLine")]
    │   ├── 175:Node[Identifier ("newline")]
    │   ├── 183:Node[Identifier ("pipe")]
    │   ├── 188:Node[Identifier ("RhsCls")]
    │   └── 195:Node[Identifier ("RuleLine")]
    └── 206:Node[Rule ("RuleLine")]
    │   ├── 217:Node[Identifier ("newline")]
    │   └── 225:Node[Identifier ("dot")]
    └── 231:Node[Rule ("RhsCls")]
    │   └── 240:Node[Identifier ("Rhs")]
    └── 246:Node[Rule ("RhsCls")]
    │   ├── 255:Node[Identifier ("Rhs")]
    │   └── 259:Node[Identifier ("RhsCls")]
    └── 268:Node[Rule ("Rhs")]
    │   └── 274:Node[Identifier ("Identifier")]
    └── 287:Node[Rule ("Rhs")]
    │   ├── 293:Node[Identifier ("op_paren")]
    │   ├── 302:Node[Identifier ("OrExpr")]
    │   └── 309:Node[Identifier ("cl_paren")]
    └── 320:Node[Rule ("OrExpr")]
    │   ├── 329:Node[Identifier ("Identifier")]
    │   ├── 340:Node[Identifier ("pipe")]
    │   └── 345:Node[Identifier ("Identifier")]
    └── 358:Node[Rule ("OrExpr")]
    │   ├── 367:Node[Identifier ("Identifier")]
    │   ├── 378:Node[Identifier ("pipe")]
    │   └── 383:Node[Identifier ("OrExpr")]
    └── 392:Node[Rule ("Identifier")]
    │   └── 405:Node[Identifier ("uppercase_id")]
    └── 420:Node[Rule ("Identifier")]
        └── 433:Node[Identifier ("lowercase_id")]
}

*/

type ASTGen struct {
	PackageName string
	Table       map[string][]*pkg.Rule
	Entries     []string
	NodeTypes   []string
}

func (g *ASTGen) SetPackageName(pkg_name string) {
	g.PackageName = pkg_name
}

var (
	ASTGenerator *ggen.CodeGenerator[*ASTGen]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*ASTGen]("", ast_templ)
	if err != nil {
		Logger.Fatalf("Error creating code generator: %s", err.Error())
	}

	f1 := func(a *ASTGen) error {
		a.NodeTypes = []string{"SourceNode"}

		entries := make([]string, 0, len(a.Table))

		for lhs, rules := range a.Table {
			aeg := NewAstElemGen(lhs, rules)
			if aeg == nil {
				continue
			}

			entries = append(entries, aeg.String())

			pos, ok := slices.BinarySearch(a.NodeTypes, aeg.Target)
			if !ok {
				a.NodeTypes = slices.Insert(a.NodeTypes, pos, aeg.Target)
			}
		}

		a.Entries = entries

		a.NodeTypes = uslc.DeleteElem(a.NodeTypes, "SourceNode")

		return nil
	}

	tmp.AddDoFunc(f1)

	ASTGenerator = tmp
}

const ast_templ string = `// Code generated by SlParser.
package {{ .PackageName }}

import (
	"github.com/PlayerR9/grammar/ast"
	gr "github.com/PlayerR9/grammar/grammar"
)

// NodeType represents the type of a node in the AST tree.
type NodeType int

{{ if eq (len .NodeTypes) 0 }}const (
	SourceNode NodeType = iota

	// Add here your custom node names...
){{ else }}const (
	SourceNode NodeType = iota

	// Add here your custom node names...
	{{- range $index, $node := .NodeTypes }}
	{{ $node }}
	{{- end }}

	// Add here your custom node types.
){{ end }}

// String implements the NodeTyper interface.
func (t NodeType) String() string {
	return [...]string{
		"Source",
		// Add here your custom node names.
	}[t]
}

var (
	// ast_builder is the AST builder of the parser.
	ast_builder ast.Make[*Node, token_type]
)

func init() {
	// Add here your custom AST builder rules...
	{{- range $index, $entry := .Entries }}
		{{ $entry }}
	{{- end }}
}`
