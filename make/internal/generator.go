package internal

import "github.com/PlayerR9/go-generator"

type GenData struct {
	PackageName  string
	Symbols      []string
	Rules        []string
	LastTerminal string
}

func (gd *GenData) SetPackageName(pkg_name string) {
	if gd == nil {
		return
	}

	gd.PackageName = pkg_name
}

var (
	Generator *generator.CodeGenerator[*GenData]
)

func init() {
	var err error

	Generator, err = generator.NewCodeGeneratorFromTemplate[*GenData]("enum", templ)
	if err != nil {
		panic(err)
	}
}

var templ string = `// Code generated by SlParser. Do not edit.
package {{ .PackageName }}

import (
	"github.com/PlayerR9/SlParser/parser"
)

//go:generate stringer -type=TokenType

type TokenType int

const (
	EtInvalid TokenType = iota -1{{ range $index, $value := .Symbols }}
	{{ $value }}
	{{- end }}
)

func (t TokenType) IsTerminal() bool {
	return t <= {{ .LastTerminal }}
}
	
var (
	is parser.ItemSet[TokenType]
)

func init() {
	is = parser.NewItemSet[TokenType]()

	{{ range $index, $value := .Rules }}
	{{ $value }}
	{{ end }}
}

var (
	Parser *parser.Parser[TokenType]
)

func init() {
	Parser = parser.Build(&is)
}

// PrintItemSet prints the item set.
//
// Returns:
//   - []string: the lines of the item set.
func PrintItemSet() []string {
	return is.PrintTable()
}`
