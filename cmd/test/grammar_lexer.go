// Code generated by SlParser.
package test

import (
	"github.com/PlayerR9/grammar/grammar"
	"github.com/PlayerR9/grammar/lexer"
)

var (
	// matcher is the matcher of the grammar.
	matcher *lexer.Matcher[token_type]
)

func init() {
	matcher = lexer.NewMatcher[token_type]()

	// Add here your custom matcher rules.
}

var (
	// internal_lexer is the lexer of the grammar.
	internal_lexer *lexer.Lexer[token_type]
)

func init() {
	lex_one := func(l *lexer.Lexer[token_type]) (*grammar.Token[token_type], error) {
		at := l.Pos()

		match, _ := matcher.Match(l)

		if match.IsValidMatch() {
			symbol, data := match.GetMatch()

			return grammar.NewToken(symbol, data, at, nil), nil
		}

		// Lex here...
	
		panic("Implement me!")
	}

	internal_lexer = lexer.NewLexer(lex_one)
}