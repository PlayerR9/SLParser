package internal

import (
	"errors"
	"fmt"

	kdd "github.com/PlayerR9/SlParser/kdd"
	gcers "github.com/PlayerR9/go-errors"
	"github.com/PlayerR9/go-generator"
)

// TokenGen is the data of the token.
type TokenGen struct {
	// PackageName is the name of the package.
	PackageName string

	// Symbols is the list of symbols.
	Symbols []string

	// LastTerminal is the last terminal.
	LastTerminal string

	// Rules is the list of rules.
	Rules []string
}

// SetPackageName implements the generator.PackageNameSetter interface.
func (gd *TokenGen) SetPackageName(pkg_name string) {
	if gd == nil {
		return
	}

	gd.PackageName = pkg_name
}

// NewTokenGen creates a new token generator from the given list of nodes.
//
// Parameters:
//   - tokens: The list of nodes.
//
// Returns:
//   - *TokenGen: The token generator.
//   - error: An error if any.
func NewTokenGen(tokens []*kdd.Node) (*TokenGen, error) {
	if len(tokens) == 0 {
		return nil, gcers.NewErrInvalidParameter("tokens must not be empty")
	}

	for i, tk := range tokens {
		err := kdd.CheckNode(tk)
		if err != nil {
			return nil, fmt.Errorf("token at index %d: %w", i, err)
		}
	}

	var symbols []string

	symbols = make([]string, 0, len(tokens))

	for _, tk := range tokens {
		gcers.AssertNotNil(tk, "tk")

		symbols = append(symbols, tk.Data)
	}

	lt, err := FindLastTerminal(tokens)
	if err != nil {
		return nil, err
	} else if lt == nil {
		return nil, errors.New("missing terminal")
	}

	gd := &TokenGen{
		Symbols:      symbols,
		LastTerminal: lt.Data,
	}

	return gd, nil
}

var (
	// TokenGenerator is the token generator.
	TokenGenerator *generator.CodeGenerator[*TokenGen]
)

func init() {
	var err error

	TokenGenerator, err = generator.NewCodeGeneratorFromTemplate[*TokenGen]("enum", token_templ)
	gcers.AssertErr(err, "generator.NewCodeGeneratorFromTemplate[*TokenGen](%q, token_templ)", "enum")
}

// token_templ is the template for the token.
const token_templ string = `// Code generated by SlParser. Do not edit.
package internal

import (
	"github.com/PlayerR9/SlParser/parser"
)

type TokenType int

const (
	EtInvalid TokenType = iota -1{{ range $index, $value := .Symbols }}
	{{ $value }}
	{{- end }}
)

func (t TokenType) IsTerminal() bool {
	return t <= {{ .LastTerminal }}
}
	
var (
	Parser *parser.Parser[TokenType]
)

func init() {
	is := parser.NewItemSet[TokenType]()
	{{ range $index, $value := .Rules }}
	{{ $value }}
	{{- end }}

	Parser = parser.Build(&is)
}`
