package internal

import (
	kdd "github.com/PlayerR9/SlParser/kdd"
	"github.com/PlayerR9/go-generator"
)

type ASTGen struct {
	PackageName string
	Ast         []string
}

func (g *ASTGen) SetPackageName(pkg_name string) {
	if g == nil {
		return
	}

	g.PackageName = pkg_name
}

func NewASTGen(tokens []*kdd.Node) (*ASTGen, error) {
	candidates, err := CandidatesForAst(tokens)
	if err != nil {
		return nil, err
	}

	gen := &ASTGen{
		Ast: candidates,
	}

	return gen, nil
}

var (
	ASTGenerator *generator.CodeGenerator[*ASTGen]
)

func init() {
	var err error

	ASTGenerator, err = generator.NewCodeGeneratorFromTemplate[*ASTGen]("ast", ast_templ)
	if err != nil {
		panic(err)
	}
}

const ast_templ = `// Code generated by SlParser. Do not edit.
package {{ .PackageName }}

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"iter"
	"log"
	"os"

	sl "github.com/PlayerR9/SlParser"
	"github.com/PlayerR9/SlParser/ast"
	"github.com/PlayerR9/SlParser/grammar"
	"github.com/PlayerR9/SlParser/lexer"
	"github.com/PlayerR9/SlParser/parser"
)

//go:generate stringer -type=NodeType -linecomment

type NodeType int

const (
	/*InvalidNode represents an invalid node.
	Node[InvalidNode]
	*/
	InvalidNode NodeType = iota -1{{ range $index, $value := .Ast }}

	/*{{ $value }}Node is [...].
	Node[{{ $value }}Node]
	*/
	{{ $value }}Node // {{ $value }}
	{{- end }}
)

var (
	ast_maker *ast.AstMaker[*Node, internal.TokenType]
)
	
func init() {
	builder := ast.NewBuilder[*Node, internal.TokenType]()

	// TODO: Add here your own custom rules...
	{{ range $index, $value := .Ast }}
	builder.Register(internal.Nt{{ $value }}, func(tk *grammar.ParseTree[internal.TokenType]) (*Node, error) {
		children := tk.GetChildren()
		if len(children) == 0 {
			return nil, errors.New("expected at least one child")
		}

		// TODO: Complete this function...

		node := NewNode(tk.Pos(), {{ $value }}Node, "")
		return node, nil
	})
	{{- end }}

	ast_maker = builder.Build()
}`
