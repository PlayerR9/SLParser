package generation

import ggen "github.com/PlayerR9/go-generator/generator"

type ErrorGen struct {
	PackageName string
}

func (g *ErrorGen) SetPackageName(pkg_name string) {
	g.PackageName = pkg_name
}

var (
	ErrorGenerator *ggen.CodeGenerator[*ErrorGen]
)

func init() {
	tmp, err := ggen.NewCodeGeneratorFromTemplate[*ErrorGen]("", error_templ)
	if err != nil {
		Logger.Fatalf("Error creating code generator: %s", err.Error())
	}

	ErrorGenerator = tmp
}

const error_templ = `// Code generated by SlParser. Add error message here.
package {{ .PackageName }}

import (
	"strconv"
	"strings"

	gcstr "github.com/PlayerR9/go-commons/strings"
)

// ErrInvalidNumberOfChildren is an error that occurs when the number of children is invalid.
type ErrInvalidNumberOfChildren struct {
	// Expecteds is the expected number of children.
	Expecteds []int

	// Got is the actual number of children.
	Got int
}

// Error implements the error interface.
//
// Message: "expected {expecteds} children, got {got} instead".
func (e *ErrInvalidNumberOfChildren) Error() string {
	var builder strings.Builder

	builder.WriteString("expected ")

	if len(e.Expecteds) == 0 {
		builder.WriteString("no")
	} else {
		builder.WriteString(gcstr.EitherOrString(gcstr.SliceOfInts(e.Expecteds)))
	}

	builder.WriteString(" children, got ")

	if e.Got == 0 {
		builder.WriteString("none")
	} else {
		builder.WriteString(strconv.Itoa(e.Got))
	}

	builder.WriteString(" instead")

	return builder.String()
}

// NewErrInvalidNumberOfChildren creates a new ErrInvalidNumberOfChildren error.
//
// Parameters:
//   - expecteds: The expected number of children.
//   - got: The actual number of children.
//
// Returns:
//   - *ErrInvalidNumberOfChildren: The new error. Never returns nil.
func NewErrInvalidNumberOfChildren(expecteds []int, got int) error {
	return &ErrInvalidNumberOfChildren{
		Expecteds: expecteds,
		Got:       got,
	}
}
`
